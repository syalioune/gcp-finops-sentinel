name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version-file: '.python-version'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pylint black isort

      - name: Run Black
        run: |
          black --check --line-length=100 src/ tests/

      - name: Run isort
        run: |
          isort --check-only --profile=black --line-length=100 src/ tests/

      - name: Run Pylint
        run: |
          pip install -r src/requirements.txt
          pylint src/*.py --max-line-length=100 --disable=C0114,C0115,C0116 --min-similarity-lines=10 --good-names=i,j,k,x,y,z,_,id,df,logger --fail-under=8.0
          pylint tests/*.py --fail-under=7.0 --max-line-length=100 --disable=C0114,C0115,C0116 --min-similarity-lines=10 --good-names=i,j,k,x,y,z,_,id,df,logger

  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12', '3.13']

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r src/requirements.txt
          pip install -r src/requirements-test.txt

      - name: Run unit tests
        run: |
          pytest tests/ -v \
            --cov=src \
            --cov-report=term \
            --cov-report=xml \
            --cov-report=html
        env:
          PYTHONPATH: ${{ github.workspace }}/src

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        if: matrix.python-version == '3.13'
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage report
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.4.3
        if: matrix.python-version == '3.13'
        with:
          name: coverage-report
          path: htmlcov/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version-file: '.python-version'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r src/requirements.txt
          pip install -r src/requirements-test.txt

      - name: Start Pub/Sub Emulator and Function
        run: |
          docker compose up -d pubsub-emulator budget-function
          sleep 10

      - name: Run integration tests
        run: |
          docker compose --profile integration run --rm integration-test

      - name: Show logs on failure
        if: failure()
        run: |
          docker compose logs budget-function
          docker compose logs pubsub-emulator

      - name: Stop services
        if: always()
        run: |
          docker compose down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  test-docker-build:
    name: Test Docker Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.8.0

      - name: Build Docker image
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v5.4.0
        with:
          context: .
          file: Dockerfile
          push: false
          tags: budget-response-function:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, security-scan, test-docker-build]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "### Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.test-docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
      - name: Comment on security scan exclusion
        run: |
          # Security scan failures do not block the workflow
          # This allows informational security scans without preventing deployments
          echo "Note: Security scan is excluded from failure conditions (informational only)"


      - name: Fail if any test failed
        if: |
          needs.lint.result == 'failure' ||
          needs.unit-tests.result == 'failure' ||
          needs.integration-tests.result == 'failure' ||
          needs.test-docker-build.result == 'failure'
        run: exit 1
